{"version":3,"sources":["components/wrapper/Wrapper.js","components/header/index.js","components/searchBar/index.js","components/videoItem/index.js","components/videoList/index.js","components/videoDetail/index.js","api/youtube.js","components/App.js","hooks/useVideos.js","serviceWorker.js","index.js"],"names":["WrapperStyled","styled","div","Wrapper","children","HeaderStyled","Header","setDarkMode","darkMode","className","onClick","SearchContainer","SearchBar","onFormSubmit","useState","term","setTerm","onSubmit","event","preventDefault","placeholder","type","value","onChange","target","VideoItemContainer","VideoItem","video","onVideoSelect","alt","snippet","title","src","thumbnails","medium","url","VideoList","videos","renderedList","map","key","id","videoId","Gif","VideoDetail","videoSrc","description","axios","create","baseURL","params","part","maxResults","process","App","selectedVideo","setSelectedVideo","defaultSearchTerm","setVideos","useEffect","search","a","youtube","get","q","response","data","items","useVideos","setChecked","mainClass","changeMedia","mq","matches","window","matchMedia","addListener","removeListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89c01152.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst WrapperStyled = styled.div`\r\n    max-width: 1312px;\r\n    margin: auto;\r\n    padding: 0 1rem;\r\n`\r\n\r\nexport default function Wrapper({children}) {\r\n    return (\r\n        <WrapperStyled >\r\n            {children}\r\n        </WrapperStyled>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Wrapper from '../../components/wrapper/Wrapper'\r\n\r\nconst HeaderStyled = styled.div`\r\n    background: var(--white);\r\n    margin-bottom: 1em;\r\n    box-shadow: 0 2px 4px 0 rgba(0,0,0,.06);\r\n    .content {\r\n        height: 80px;\r\n        display: flex;\r\n        justify-content: space-between;     \r\n        align-items: center;   \r\n    }\r\n    h1{\r\n        font-size: 14px;\r\n    }\r\n    a {\r\n        text-decoration: none;\r\n        color: var(--black);\r\n    }\r\n    .dark-mode {\r\n        cursor: pointer;\r\n        .moon {\r\n            display: inline-flex;\r\n            transform: rotate(-25deg);\r\n            margin-right: 10px;\r\n        }\r\n        p{\r\n            font-size: 12px;\r\n            font-weight: 600;\r\n        }\r\n    }\r\n    @media screen and (min-width: 768px) {\r\n        margin-bottom: 3em;\r\n        h1{\r\n            font-size: 24px;\r\n        }\r\n        p {\r\n            font-size: 1rem;\r\n        }\r\n    }\r\n`\r\n\r\nexport default function Header({ setDarkMode, darkMode }) {\r\n    function handleClick() {\r\n        setDarkMode(!darkMode)\r\n    }\r\n    return (\r\n        <HeaderStyled>\r\n            <Wrapper>\r\n                <div className=\"content\">\r\n                    <div >\r\n                        <h1>\r\n                            YouTube   \r\n                        </h1>                    \r\n                    </div>\r\n\r\n                    <div className=\"dark-mode\">\r\n                        <p onClick={handleClick}>\r\n                            <span className=\"moon\">\r\n                                {\r\n                                    darkMode \r\n                                    ? <i className=\"fas fa-moon\"></i> \r\n                                    : <i className=\"far fa-moon\"></i>\r\n                                }                     \r\n                            </span>\r\n                            Dark Mode     \r\n                        </p>             \r\n                    </div>\r\n                </div>\r\n            </Wrapper>\r\n        </HeaderStyled>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SearchContainer = styled.div`\r\n  .search-bar.ui.segment {\r\n    background: var(--white);\r\n  }\r\n  input{\r\n    background: var(--white) !important;\r\n    color: var(--black);\r\n    &::-webkit-input-placeholder {\r\n      color: #c4c4c4;\r\n    }\r\n  }\r\n    \r\n`\r\n\r\nexport default function SearchBar({ onFormSubmit }) {\r\n  const [term, setTerm] = useState('');\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    onFormSubmit(term);\r\n  };\r\n\r\n  return (\r\n    <SearchContainer>\r\n      <div className=\"search-bar ui segment\">\r\n          <form onSubmit={onSubmit} className=\"ui form\">\r\n            <div className=\"field\">\r\n                <input\r\n                    placeholder=\"Search\"\r\n                    type=\"text\"\r\n                    value={term}\r\n                    onChange={(event) => setTerm(event.target.value)}\r\n                />\r\n            </div>\r\n          </form>\r\n      </div> \r\n    </SearchContainer>\r\n    \r\n  );\r\n};\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst VideoItemContainer = styled.div`\r\n  .video-item {\r\n    display: flex !important;\r\n    align-items: center !important;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .video-item.item img {\r\n    max-width: 180px;\r\n  }\r\n`\r\n\r\nexport default function VideoItem({ video, onVideoSelect }) {\r\n  return (\r\n    <VideoItemContainer>\r\n      <div onClick={() => onVideoSelect(video)} className=\"video-item item\" >\r\n        <img\r\n          alt={video.snippet.title}\r\n          className=\"ui image\"\r\n          src={video.snippet.thumbnails.medium.url}\r\n        />\r\n        <div className=\"content\">\r\n          <div className=\"header\">{video.snippet.title}</div>\r\n        </div>\r\n      </div> \r\n    </VideoItemContainer>\r\n    \r\n  );\r\n};\r\n","import React from 'react';\r\nimport VideoItem from '../videoItem';\r\n\r\nexport default function VideoList({ videos, onVideoSelect }) {\r\n  const renderedList = videos.map(video => {\r\n    return (\r\n      <VideoItem\r\n        key={video.id.videoId}\r\n        onVideoSelect={onVideoSelect}\r\n        video={video}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div className=\"ui relaxed divided list\">{renderedList}</div>;\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Gif = styled.div`\r\n  img{\r\n    display: block;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n`\r\n\r\n\r\nexport default function VideoDetail({ video }) {\r\n  if (!video) {\r\n    return <Gif><img src=\"https://i.stack.imgur.com/h6viz.gif\" alt=\"loading\"/></Gif>;\r\n  }\r\n\r\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"ui embed\">\r\n        <iframe title=\"video player\" src={videoSrc} />\r\n      </div>\r\n      <div className=\"ui segment\">\r\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\r\n        <p>{video.snippet.description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\r\n\r\nexport default axios.create({\r\n    baseURL:'https://www.googleapis.com/youtube/v3/',\r\n    params: {\r\n        part: 'snippet',\r\n        maxResults: 5,\r\n        key: API_KEY\r\n    }\r\n\r\n})\r\n","import React, { useState, useEffect } from 'react';\nimport '../../src/style/App.css'\nimport Header from '../components/header';\nimport SearchBar from '../components/searchBar';\nimport  VideoList from '../components/videoList';\nimport VideoDetail  from '../components/videoDetail';\nimport useVideos from '../hooks/useVideos';\n\n\n\nexport default function App() {\n  const [selectedVideo, setSelectedVideo] = useState(null);\n\n  const [videos, search] = useVideos('Lo fi music');\n\n  useEffect(() => {\n    setSelectedVideo(videos[0]);\n  }, [videos]);\n\n\n  const [darkMode, setDarkMode] = useState(false);\n  const [checked, setChecked] = useState(false)\n  const mainClass = darkMode ? 'is-dark-mode' : 'is-light-mode';\n\n  function changeMedia(mq) {\n    setDarkMode(mq.matches)\n    setChecked(mq.matches)\n  }\n\n  useEffect(() => {\n    const mq = window.matchMedia('(prefers-color-scheme: dark)')\n    mq.addListener(changeMedia)\n    setDarkMode(mq.matches)\n    setChecked(mq.matches)\n    return () => {\n      mq.removeListener(changeMedia)\n    }\n  }, [])\n\n\n\n  return(\n    <main className={mainClass}>\n      <Header setDarkMode={setDarkMode} darkMode={darkMode} />\n      <div className=\"ui container\">\n        <SearchBar onFormSubmit={search} />\n        {/*Semantic UI Responsive Devise Computer only*/}\n        <div className=\"ui computer only grid\">\n          <div className=\"ui row\">\n            <div className=\"five wide column\">\n              <VideoList onVideoSelect={setSelectedVideo} videos={videos} />\n            </div>\n            <div className=\"eleven wide column\">\n              <VideoDetail video={selectedVideo} />\n            </div>\n          </div>\n        </div>\n        {/*Semantic UI Responsive Devise tablet only*/}\n        <div className=\"ui tablet only grid\">\n          <div className=\"ui row\">\n            <div className=\"five wide column\">\n              <VideoList onVideoSelect={setSelectedVideo} videos={videos} />\n            </div>\n            <div className=\"eleven wide column\">\n              <VideoDetail video={selectedVideo} />\n            </div>\n          </div>\n        </div>\n        {/*Semantic UI Responsive Devise mobile only*/}\n        <div className=\"ui mobile only grid\">\n          <div className=\"ui stackable row\">\n            <div className=\"eleven wide column\">\n              <VideoDetail video={selectedVideo} />\n            </div>          \n            <div className=\"five wide column\">\n              <VideoList onVideoSelect={setSelectedVideo} videos={videos} />\n            </div>\n          </div>\n        </div> \n      </div>\n    </main> \n  );\n};\n\n\n","import { useState, useEffect } from 'react';\r\nimport youtube from '../api/youtube';\r\n\r\nconst API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\r\n\r\nexport default function useVideos(defaultSearchTerm) {\r\n  const [videos, setVideos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    search(defaultSearchTerm);\r\n  }, [defaultSearchTerm]);\r\n\r\n  const search = async (term) => {\r\n    const response = await youtube.get('/search', {\r\n      params: {\r\n        q: term,\r\n        part: 'snippet',\r\n        maxResults: 5,\r\n        key: API_KEY\r\n      },\r\n    });\r\n    \r\n    setVideos(response.data.items);\r\n  };\r\n\r\n  return [videos, search];\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}